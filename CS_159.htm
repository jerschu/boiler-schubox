<!DOCTYPE html>
<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<link rel="stylesheet" href="customize.css">

</head>

<body lang=EN-US style='word-wrap:break-word'>

<div id="content" class=WordSection1>

<h1>Chapter 1- Computers</h1>

<h2>4 parts of computer:</h2>

<p class=MsoListParagraphCxSpFirst >1.<span
>&nbsp;&nbsp; </span>A central processing
unit</p>

<p class=MsoListParagraphCxSpMiddle >2.<span
>&nbsp;&nbsp; </span>Main memory</p>

<p class=MsoListParagraphCxSpMiddle >3.<span
>&nbsp;&nbsp; </span>Input/output hardware</p>

<p class=MsoListParagraphCxSpLast >4.<span
>&nbsp;&nbsp; </span>Systems
interconnection (connects all the above)</p>

<p class=MsoNormal><img width=370 height=265 src="CS_159_files/image001.png"></p>

<p class=MsoNormal>as programmers we only care about the central processing
unit and the main memory storage</p>

<h2>Processor</h2>

<p class=MsoNormal>where all the processing of instruction and associated data
will take place</p>

<p class=MsoListParagraphCxSpFirst >1.<span
>&nbsp;&nbsp; </span>Registers- small
amount of memory local to the processor used for temporary storage related to
the current instruction being executed</p>

<p class=MsoListParagraphCxSpMiddle >2.<span
>&nbsp;&nbsp; </span>Arithmetic and Logic
Unit- Hardware responsible for the calculations required of an instruction</p>

<p class=MsoListParagraphCxSpMiddle >3.<span
>&nbsp;&nbsp; </span>Control Unit-
coordinates the operation of the processor</p>

<p class=MsoListParagraphCxSpLast >4.<span
>&nbsp;&nbsp; </span>Interconnection-
connecting all the above</p>

<p class=MsoNormal><img width=374 height=238 src="CS_159_files/image002.png"></p>

<h2>Main Memory</h2>

<p class=MsoNormal>the memory of a computer will store the data and instruction
of the programs that we will write</p>

<p class=MsoNormal>Primary memory- RAM (random access memory)</p>

<p class=MsoNormal>Secondary memory- SSD (solid state drive) or HDD (hard disk
drive)</p>

<p class=MsoNormal>Second Memory is slower than primary Memory</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Further physical distance from CPU</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Increased time required to locate specific content</p>

<p class=MsoNormal>Can’t grow size of primary memory because of a space and
power issue</p>

<p class=MsoNormal><img width=374 height=251 src="CS_159_files/image003.png"></p>

<h2>Processing Instructions</h2>

<p class=MsoNormal><img width=374 height=265 src="CS_159_files/image004.png"></p>

<h2>Languages</h2>

<p class=MsoNormal>Natural languages- languages that are spoken and have evolved
over centuries for of attributes and unfit for use by computer</p>

<p class=MsoNormal>Programming language- composing of keywords that come from
natural language but are used without the ambiguity </p>

<p class=MsoNormal><img width=374 height=185 src="CS_159_files/image005.png"></p>

<p class=MsoNormal>Machine language- language of the computer that is written
in only 0’s and 1’s because the internal circuits of a computer are made of
switches </p>

<p class=MsoNormal>compilation- translator.  Turns programing language into low
level language</p>

<h2>Programming Process</h2>

<p class=MsoNormal><img width=374 height=125 src="CS_159_files/image006.png"></p>

<p class=MsoNormal>Text editor- software used to write computer program (for
this course will be vi)</p>

<p class=MsoNormal>Compiler- category of software that is used to convert the
source programming language into the machine language</p>

<p class=MsoNormal>Syntax- set of rules of the programming language</p>

<p class=MsoNormal>Compiler attempts to validate your source code with the
syntax of the C programming language</p>

<p class=MsoNormal>Error- violation in the rules of the syntax (no executable
file will be created)</p>

<p class=MsoNormal>Compiling Process</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Preprocessor- red the source done and prepares it for
translation.  </p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Preprocessor directives- special instructions that you give the
preprocessor to prepare source done for translation</p>

<p class=MsoNormal><img width=186 height=37 src="CS_159_files/image007.png"
alt="# include &lt;stdio.h&gt;"> <img width=186 height=37
src="CS_159_files/image008.png" alt="#define x 1"></p>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Each time you modify the source file you must recompile the code
and create a new a.out to see the changes as reflected in your source code </p>

<h2>Structure Charts</h2>

<p class=MsoNormal>Large programs are complex structures consisting of many
interrelated parts and must be carefully designed</p>

<p class=MsoNormal>The structure chart shows how we break up our problem into
sub problems and how data will flow between these modules</p>

<p class=MsoNormal>Cross hatch in lower right corner indicates that function is
called fore than once</p>

<h2>Flowchart</h2>

<p class=MsoNormal>Visually describe visually the logic of an individual function
(smaller tasks of larger problem)</p>

<h1>Chapter 2- Introduction to C</h1>

<h2>Commenting</h2>

<p class=MsoNormal>Internal documentation which are ignored by the compiler but
used for reading and making sense of the code</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Single line comments //text</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Multiline comments /* text */</p>

<p class=MsoNormal>Comments can appear anywhere into the program</p>

<p class=MsoNormal>Don’t comment every line</p>

<p class=MsoNormal>Must include an assignment header ever program</p>

<p class=MsoNormal>Must comment every variable</p>

<h2>Indicators</h2>

<p class=MsoNormal>Allow use to name data and other objects in program</p>

<p class=MsoNormal>variable in the program must be related to its purpose in
the program</p>

<p class=MsoNormal>Rarely are single characters</p>

<p class=MsoNormal>Characters in all caps represent a symbolic/defined constant</p>

<p class=MsoNormal>First character must be alphabetic</p>

<p class=MsoNormal>Must consist of alphabetical characters numbers and
underscores</p>

<p class=MsoNormal>can’t duplicate a reserved word</p>

<h2>Data Types</h2>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Determines the memory necessary to store a value of a given type</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>How value of a given type is stored in the memory of the computer</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Which operations can be performed on the value?</p>

<p class=MsoNormal>Integer- number without fractional part (short, int, long,
long long)</p>

<p class=MsoNormal>Character-value that can be represented in the alphabet of
the computer</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Each value has a corresponding small integer value</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Since it is stored as an integer you can perform arithmetic
operations on character</p>

<p class=MsoNormal>Boolean- logical data (either true or false)</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Nonzero numbers are true and zero is false</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>We will not use the bool data type this semester</p>

<p class=MsoNormal>Floating point- Number with fractional part (float, double,
and long double)</p>

<h2>Variables</h2>

<p class=MsoNormal>Named memory location that has a data type</p>

<p class=MsoNormal>Must be declared and defined</p>

<p class=MsoNormal>Declaration- gives variable a name</p>

<p class=MsoNormal>Definition- reserves memory location</p>

<p class=MsoNormal>Variable initialization- setting variable equal to a value
for the first time</p>

<p class=MsoNormal>Possible to initialize variable at the same time its created</p>

<p class=MsoNormal>Uninitialized variables will be assigned a location in
memory that may have prior use</p>

<h2>Constants</h2>

<p class=MsoNormal>Literal constants- an unnamed value used to specify data
(actual number)</p>

<p class=MsoNormal>Symbolic/defined constants- using the #define preprocessor
all occurrences of symbol will be replaced by replacement value</p>

<p class=MsoNormal><img width=374 height=37 src="CS_159_files/image009.png"
alt="#define symbol replacement"></p>

<p class=MsoNormal>Use of constants help document the program by given meaning
to operands in an expression</p>

<p class=MsoNormal>Defined constants</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>No data type</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Literals they expand to do</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Don’t use the assignment operator</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>No extra memory</p>

<p class=MsoNormal>Difficult because it can be difficult to error check</p>

<h2>Formatted IO (input and output)</h2>

<p class=MsoNormal>Printf- used to displayed message and formatted data to the
monitor</p>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>printf(Format string, data list)</p>

<p class=MsoNormal><img width=374 height=37 src="CS_159_files/image010.png"
alt="\n- new line"></p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Placeholder </p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Int %d</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Long %ld</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Long long %lld</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Float %f</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Double %lf</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Long double %Lf</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Char %c</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Placeholder- used to hold space for variable</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Width modifier- used to reserve a given amount of space for a
value to be displayed</p>

<p class=MsoListParagraphCxSpLast style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Precision modifier- used with plot point data to determine the
number of digits to display to the right of the decimal place indicates where
the memory </p>

<p class=MsoNormal><img width=374 height=44 src="CS_159_files/image011.png"
alt="%(flag)(width)(precision)(size)(code)"></p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Scanf- input function</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Scanf(format string, address list)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Format string- list the types of data expected as input</p>

<p class=MsoListParagraphCxSpLast style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Address list- indicates where in the memory of the computer the
input should be stored</p>

<h2>Errors</h2>

<p class=MsoNormal>Syntax error- compile time error that arises due to a
mistake you made that violates the syntax rules of the C programming language
causing the compiler to stop working</p>

<p class=MsoNormal>Warning- feedback provided by the compiler that you might
have a mistake</p>

<p class=MsoNormal>Run time error- error occurs while program is running</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Can cause crash (segmentation fault and floating exception)</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Output is not what is expected</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Logical error- run time error in which the programmer is responsible
for implementing a flaw in the program</p>

<h1>Chapter 3- Structure of C</h1>

<h2>Expressions</h2>

<p class=MsoNormal>reduces to a single variable </p>

<p class=MsoNormal>Operator- language specific syntactical token that requires
action to be taken +-*/^</p>

<p class=MsoNormal>Operand- receives operator’s action</p>

<p class=MsoNormal>Precedence- determines which operator and operand belong and
the order in which it will be evaluated</p>

<p class=MsoNormal>Assignment expressions- evaluates the operand on the right
side of = and saves the value in the memory as the variable on the left</p>

<p class=MsoNormal>Compound assignment- apply a mathematical operation to a
viable and save it back to that value (+=, -=, *=, /=, %=)</p>

<h2>Prefix and postfix operators</h2>

<p class=MsoNormal>Post fix expression- one operand followed by operator (gets
data for use and then updates the value)</p>

<p class=MsoNormal>Prefix expression- one operator followed by operand (updates
value then gets the data for use)</p>

<p class=MsoNormal>If a single variable is modified more than once in an
expression the result is undefined</p>

<h2>Mixed Expressions</h2>

<p class=MsoNormal>Int/int gives the result of an int</p>

<p class=MsoNormal>In a mixed type expression, the lower ranked data type is
implicitly converted to the datatype of the higher rank </p>

<p class=MsoNormal><img width=375 height=39 src="CS_159_files/image012.png"
alt="3+2.1 converts 3 to 3.0"></p>

<p class=MsoNormal><img width=375 height=229 src="CS_159_files/image013.png"> </p>

<p class=MsoNormal>Implicit conversion- done automatically by computer without
instructions from user</p>

<p class=MsoNormal>Explicit conversion- type casting (specifying what type of
data the variable should be)</p>

<p class=MsoNormal>when displayed on printf data is rounded</p>

<p class=MsoNormal>when converted to in data is truncated</p>

<p class=MsoNormal>assignment conversion- occurs when data type of the right
side is different than the variable on the left side.  The data on the right is
converted to match the data type of the variable on he left</p>

<p class=MsoNormal>Selection via calculation</p>

<p class=MsoNormal><img width=375 height=50 src="CS_159_files/image014.png"
alt="(n+1)%n=1 or 0 (if n=1)"></p>

<h1>Chapter 4- User Defined Functions</h1>

<p class=MsoNormal>Functions are used:</p>

<p class=MsoListParagraphCxSpFirst >1.<span
>&nbsp;&nbsp; </span>To make program
smaller to break problem down</p>

<p class=MsoListParagraphCxSpMiddle >2.<span
>&nbsp;&nbsp; </span>Resus- in same program
and other programs</p>

<p class=MsoListParagraphCxSpLast >3.<span
>&nbsp;&nbsp; </span>Protect data</p>

<p class=MsoNormal>Functionally cohesive- Function could consist of a single
task</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Eliminate redundant code</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Testable by itself separate from the rest of the program</p>

<p class=MsoNormal>Call function- the act of telling a function to run</p>

<p class=MsoNormal>Calling function- function that makes the call</p>

<p class=MsoNormal>Called function- function being told to run</p>

<p class=MsoNormal>Parameter passing- the act of sending data to a function</p>

<p class=MsoNormal>Returning- sending a value back to called function</p>

<p class=MsoNormal>Function declaration- in global declaration section and
tells the compiler:</p>

<p class=MsoListParagraphCxSpFirst >1.<span
>&nbsp;&nbsp; </span>The type of value
being returned from the function</p>

<p class=MsoListParagraphCxSpMiddle >2.<span
>&nbsp;&nbsp; </span>The name of the
function</p>

<p class=MsoListParagraphCxSpLast >3.<span
>&nbsp;&nbsp; </span>The data being sent to
the function, number of parameters, type of parameters, order of parameters</p>

<p class=MsoNormal>Function definition- contains the code needed to complete
task</p>

<p class=MsoNormal>Void function returns no values</p>

<p class=MsoNormal><img width=375 height=161 src="CS_159_files/image015.png"
alt="	Has parameters	No parameters&#13;&#10;Value returned	Calculation	Input&#13;&#10;No value returned	Outputs function	Welcome message&#13;&#10;&#13;&#10;"></p>

<p class=MsoNormal>Values being passed to function are stored in new variables
representing new unique memory locations to refer to same memory location we must
pass my address</p>

<p class=MsoNormal>Pointer- variable that stores the memory address of another
as its value we need such a variable to receive the address being sent from the
calling function to the called function</p>

<p class=MsoNormal>Use pass by address when more than 1 value needs to be
revised and is still functionally cohesive</p>

<p class=MsoNormal>You can call functions from functions but don’t go to deep.</p>

<p class=MsoNormal>Structure chart should be wider than long</p>

<p class=MsoNormal>Downward communication- pass by value</p>

<p class=MsoNormal>Upward communication- passes my address</p>

<h1>Chapter 5- Selection</h1>

<h2>Logical </h2>

<p class=MsoNormal>Selecting code to execute or exclude based on a condition</p>

<p class=MsoNormal>Logical- piece of data that conveys the value of true or false</p>

<p class=MsoNormal>Logical data is garneted by a logical expression</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>True- not zero</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>False- zero</p>

<p class=MsoNormal>Logical operators</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>!- not operator</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Unary operator- 1 operand</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Changes a true value to false and false value to true</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>&amp;&amp;- and operator</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Binary operator- 2 operands</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>If both operands are true evaluates to true otherwise evaluates too
false</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>If the first operand is false it short circles and skips the
second operand</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Higher precedence than or operator</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>||- or operator</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Binary operator- 2 operands</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>If both operands are false evacuates to false otherwise operates
to true</p>

<p class=MsoListParagraphCxSpLast style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>If the first operand is true it short circles and skips the
second operand</p>

<p class=MsoNormal>Relational Operators- binary operators where the result will
be 1 or 0</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>&lt;- less than</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>&gt;- greater than</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>&lt;=- less than or equal to </p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>&gt;=- greater than or equal too</p>

<p class=MsoNormal> Comparative operators</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>== equal to</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>!=not equal to</p>

<p class=MsoNormal>Compound statements- combining series to relational or
logical operates resulting in a true or false logical value</p>

<p class=MsoNormal>The compiler uses a warning that you should use ( and ) when
using &amp;&amp; and|| in the same expression to make sure expression is
evaluated the correct way</p>

<h3>Complements</h3>

<p class=MsoNormal>&lt; <span style='font-family:Wingdings'>à</span> &gt;=</p>

<p class=MsoNormal>&gt; <span style='font-family:Wingdings'>à</span> &lt;=</p>

<p class=MsoNormal>== <span style='font-family:Wingdings'>à</span> !=</p>

<p class=MsoNormal>&amp;&amp; <span style='font-family:Wingdings'>à</span> ||</p>

<p class=MsoNormal>! <span style='font-family:Wingdings'>à</span>!!</p>

<p class=MsoNormal>! <span style='font-family:Wingdings'>à</span> nothing</p>

<p class=MsoNormal>When complementing &amp;&amp; operator with or operator ()
must be used round the operands to its precedence is higher</p>

<p class=MsoNormal><img width=375 height=39 src="CS_159_files/image016.png"
alt="X &amp;&amp; y || z à (!x || !y) &amp;&amp; !z"></p>

<h2>Two-way selection</h2>

<p class=MsoNormal>Logical expression evaluates to true or false</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the expression is true goes down one path</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the expression is false, it goes down the other path</p>

<p class=MsoNormal><img width=373 height=168 src="CS_159_files/image017.png"
alt="if (logical expression)&#13;&#10;{&#13;&#10;  //true actions&#13;&#10;}&#13;&#10;else&#13;&#10;{&#13;&#10;  //false actions&#13;&#10;}&#13;&#10;"></p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the else statement is optional</p>

<p class=MsoListParagraphCxSpLast style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>if body is blank delete it</p>

<p class=MsoNormal>nested if statement- you can put an if statement in the body
of another if statement </p>

<p class=MsoNormal><img width=373 height=53 src="CS_159_files/image018.png"
alt="{}- are not needed for 1 lined bodies but is a course programming standard&#13;&#10;&#13;&#10;"></p>

<h2>Conditional Expressions</h2>

<p class=MsoNormal>ternary operands- to operators and three operands</p>

<p class=MsoNormal>first operator is a question mark that separates the first
two expressions</p>

<p class=MsoNormal>the second operator is a colon that operates the last two
expressions</p>

<p class=MsoListParagraph style='margin-left:0in'><img width=373 height=40
src="CS_159_files/image019.png" alt="condition ? true action : false action;"></p>

<p class=MsoNormal>only used for very simple expressions</p>

<h2>Multi-way Selection</h2>

<p class=MsoNormal>used for more than two alternate sections of unique code</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>if/else if/ else</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:0in'><img width=374
height=246 src="CS_159_files/image020.png"
alt="if (logical expression)&#13;&#10;{&#13;&#10;  //true actions&#13;&#10;}&#13;&#10;else if (logical expression)&#13;&#10;{&#13;&#10;  //true actions&#13;&#10;}&#13;&#10;else&#13;&#10;{&#13;&#10;  //false actions&#13;&#10;}&#13;&#10;"></p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>evaluates if logical statement</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>if its false moves down and repeats until one is true</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>if it reaches the end then goes through the false actions</p>

<p class=MsoListParagraphCxSpLast style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>you can put as many else if statements as necessary</p>

<h2>Switch</h2>

<p class=MsoNormal>used to make selection among possible integer values</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>favored when possible, integer values are well known and few</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the control expression that follows the keyword switch is
evaluated and compared the series of cases</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>each case represents an expected value of the control expression</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>associated with each case are 1 or more executable statements</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>the cases must be evaluated to an integer (so can be integer
logical expression or a character)</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>default is case option to cover all values not represented by the
other individual cases</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>without break statement as soon as one true case is found all of
the following code is executed</p>

<p class=MsoNormal><img width=374 height=256 src="CS_159_files/image021.png"
alt="Switch Construct Rules&#13;&#10;1.	control expression must be integral&#13;&#10;2.	each case label is a keyword case followed by constant expression&#13;&#10;3.	no to case labels can represent the same value&#13;&#10;4.	two case statements can be associated with the same executable statements&#13;&#10;5.	the default label is not required&#13;&#10;6.	there is a maximum of one default label&#13;&#10;"></p>

<p class=MsoNormal><img width=374 height=201 src="CS_159_files/image022.png"
alt="switch (condition)&#13;&#10;{&#13;&#10;  case #:&#13;&#10;    //expressions&#13;&#10;  case #:&#13;&#10;    //expressions&#13;&#10;default:&#13;&#10;  //expressions&#13;&#10;}&#13;&#10;"></p>

<h1>Chapter 6- Repetition</h1>

<p class=MsoNormal>rapidly repeating operations or series of operation</p>

<p class=MsoNormal>loop- using a construct to repeat designated statements
under a predetermined set of conditions</p>

<p class=MsoNormal>loop iteration- one execution of the instructions inside the
body of the loop construct</p>

<p class=MsoNormal>loop control expression (LCE)- the logical expression to
determine whether the loop should initiate another iteration</p>

<p class=MsoNormal>loop initialization- preparation needed to be completed
before the first evaluation of the loop control expression</p>

<p class=MsoNormal>loop update—an executable statement found inside the body of
the loop that when executed enough times will lead to a change in the
evaluation of the loop control expression</p>

<p class=MsoNormal>loop control variable (LCV)- the variable that is
initialized, part of the loop control expression and the recipient of the
update action</p>

<p class=MsoNormal>pretest top- Prior to the start of each iteration the loop
control expression is evaluated and while the expression remains true the
repetition continues</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the minimum number of times the body of the pretest loop will
iterate is zero</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the loop control expression will be. evaluated 1 more time that
the body of the loop is ran</p>

<p class=MsoNormal>posttest loop- the loop control expression will be evaluated
at the end. of each iteration to determine whether to continue with another
iteration</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the minimum number of times the body of the pretest loop will
iterate is one</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the loop control expression will be evaluated the same number of
times as the body of the loop is running</p>

<p class=MsoNormal>counter controlled process- goes a specific number of times
when can be determined. before the loop is ran</p>

<p class=MsoNormal>event controlled process- goes until a specific event occurs
cannot be determined before the start of a loop</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>input validation</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>we do not have to validate. a particular type of data we only
have to check that it is in acceptable range of values</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>must put an appropriate message so that the user is aware of
their mistake</p>

<h2>while loop</h2>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>pretest loop </p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>minimum of 0 iterations</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:0in'><img width=374
height=99 src="CS_159_files/image023.png"
alt="while (loop control expression)&#13;&#10;{&#13;&#10;  //expression&#13;&#10;}&#13;&#10;"></p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>there is no semicolon after the loop control expression- this
will result in an infinite loop</p>

<h2>do-while loop</h2>

<p class=MsoListParagraphCxSpFirst style='margin-left:.75in;'><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>post test loop</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:.75in;'><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>minimum of 1 iterations</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:0in'><img width=374
height=124 src="CS_159_files/image024.png"
alt="do&#13;&#10;{&#13;&#10;  //expression&#13;&#10;}while(loop control expression);&#13;&#10;"></p>

<p class=MsoListParagraphCxSpLast style='margin-left:0in'><img width=374
height=58 src="CS_159_files/image025.png"
alt="need {} for body of all loops for course standards"></p>

<h2>nested loop</h2>

<p class=MsoNormal> loop inside of a loop</p>

<p class=MsoListParagraphCxSpFirst style='margin-left:.75in;'><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>it is a repetitive process inside another repetitive process</p>

<p class=MsoListParagraphCxSpLast style='margin-left:.75in;'><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>inner loop must finish for next iteration of outer loop</p>

<h2>infinite loop</h2>

<p class=MsoNormal>logical error that corrects in condition of the loop control
expression will never be false</p>

<p class=MsoListParagraph style='margin-left:.75in;'><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>use control C to terminate program</p>

<h2>for loop</h2>

<p class=MsoListParagraphCxSpFirst style='margin-left:.75in;'><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>pretest loop </p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:.75in;'><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>control controlled process (cannot be used as an event-controlled
process)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:.75in;'><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>brings together initialization loop control expression and update
to a single line of code</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:.75in;'><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>course standard. to use all three expressions in a for loop</p>

<p class=MsoListParagraphCxSpLast style='margin-left:.75in;'><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>use. for loop if it it’s a counter controlled process and all
three expressions will be utilized</p>

<p class=MsoNormal><img width=374 height=121 src="CS_159_files/image026.png"
alt="for (initialization; LCE; update)&#13;&#10;{&#13;&#10;  //expression&#13;&#10;  //expression&#13;&#10;}&#13;&#10;"></p>

<p class=MsoNormal><img width=374 height=150 src="CS_159_files/image027.png"
alt="int I;&#13;&#10;for (i=0; i&lt;5; i++)&#13;&#10;{&#13;&#10;  //expression&#13;&#10;  //expression&#13;&#10;}&#13;&#10;"></p>

<h2>recursion- function that calls itself</h2>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>recursive case- the condition when another call is made</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>base case- when function stops calling itself</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>recursion repeats until something stops it from calling itself
and then returns up the chain</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>each time a function is called the local variable occupy more
memory</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>when the number of times the recursive function is large or is
unpredictable don’t use recursion (stack overflow error)</p>

<h1>Chapter 8- Arrays</h1>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>consecutive series of variables that all share one name and data
type. </p>

<p class=MsoNormal>Each element (or variable) is associated with an index value
that represents is position in the array</p>

<p class=MsoNormal>arrays are zero based- they start at the index zero</p>

<p class=MsoNormal>declaring and defining array</p>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>informs the compiler of the name of the array the size of the
array. and the data type of each element</p>

<p class=MsoNormal><img width=374 height=189 src="CS_159_files/image028.png"
alt="//declaration&#13;&#10;int function(int);&#13;&#10;//call&#13;&#10;var=function(x[i]);&#13;&#10;//definition&#13;&#10;int function(*var)&#13;&#10;{&#13;&#10;  return var+1;&#13;&#10;}&#13;&#10;"></p>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>all arrays must be a fixed length (until introduced to dynamic
memory allocation</p>

<p class=MsoNormal><img width=184 height=45 src="CS_159_files/image029.png"
alt="type name[size];"> <img width=184 height=45 src="CS_159_files/image030.png"
alt="int students[15];"></p>

<p class=MsoNormal> array can be initialized in the declaration statement</p>

<p class=MsoNormal><img width=374 height=45 src="CS_159_files/image031.png"
alt="type name[size]={value, value, value};"></p>

<p class=MsoNormal>if the values provided is less than the defined size the
unassigned elements are filled with zeros</p>

<p class=MsoNormal>the index value is used to access and assign individual
elements in an array</p>

<p class=MsoNormal>you cannot print all elements in an array in one print
statement you must print each element individually </p>

<p class=MsoNormal>if we try to access value outside the array size </p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the program could work as expected- going beyond the limits of
the array and into memory that is not reserved for the purposes of the array my
not be reserved for any other purpose</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the program executes but results are unexpected- may be reserved
for other purpose and multiple edits to the same memory may leave an unexpected
value being stored</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>program crashes- attempts to access memory that does not exist or
the program does not have the ability to access</p>

<p class=MsoNormal>when passing an induvial element of an array toa function
pass it the same way you pass a variable</p>

<p class=MsoNormal>an individual element is being passed by value the element
of an array can be passed by address the same way as a variable</p>

<p class=MsoNormal><img width=374 height=191 src="CS_159_files/image032.png"
alt="//declaration&#13;&#10;void function(int*);&#13;&#10;//call&#13;&#10;var=function(&amp;x[i]);&#13;&#10;//definition&#13;&#10;void function(int *var)&#13;&#10;{&#13;&#10;  *var=*var+1&#13;&#10;}&#13;&#10;"></p>

<p class=MsoNormal>An entire array is passed by address where the value passed
is the first item in the array (index 0)</p>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>if x is an array (int x[3]={1,4,7}) then when x is passed to a
function it looks like function(x)</p>

<p class=MsoNormal>the index of an array represents the offset from where the
array begins in the memory of the computer</p>

<p class=MsoNormal>Index range violations- the address represented by the name
of the array is added to the specified index to calculate a new memory address
which may be beyond the memory specifically allocated for the array </p>

<h2>Sorting</h2>

<p class=MsoNormal>Selection sort- traverse the unsorted list to identify the
smallest (or largest value) exchange this value with the value in the sorted
list that is adjacent to the sorted list.  Repeat until the unsorted list is
empty</p>

<p class=MsoNormal><img width=374 height=239 src="CS_159_files/image033.png"></p>

<p class=MsoNormal>Bubble Sorting- traverse the unsorted list and compare the
neighboring elements.  Each time there is a pair of elements that are out of
order swap them</p>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>many swaps can occur in a single pass causing a great change in 
the array</p>

<p class=MsoNormal><img width=374 height=239 src="CS_159_files/image034.png"></p>

<p class=MsoNormal>Insertion Sort</p>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>compare the value in the unsorted list that is adjacent to the
sorted list and determine where among the values in the sorted list it is to be
inserted</p>

<p class=MsoNormal><img width=374 height=239 src="CS_159_files/image035.png"></p>

<p class=MsoNormal>N-1 passes are required to sort a task of N elements</p>

<p class=MsoNormal>These algorithms are not optimized to end when the data
reaches a sorted state we must be careful not to add logic that requires to
much effort</p>

<p class=MsoNormal><img width=374 height=177 src="CS_159_files/image036.png"
alt="Pass Number	Selection/Bubble	Insertion&#13;&#10;1	1	2&#13;&#10;2	2	3&#13;&#10;3	3	4&#13;&#10;4	4	5&#13;&#10;5	6	6&#13;&#10;&#13;&#10;"></p>

<h2>Searching</h2>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Process used to find the location of a target in a data set
(location, number of occurrences, presence of the target in the data set</p>

<p class=MsoNormal>Sequential Search- traverse the array one index at a time
until we find the target or search the entire array</p>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Every element is unique and data is not sorted</p>

<p class=MsoNormal><img width=374 height=224 src="CS_159_files/image037.png"
alt="17	21	5	15	22	31	3	12	25	30&#13;&#10;0	1	2	3	4	5	6	7	8	9&#13;&#10; Search for 31&#13;&#10;•	17 != 31&#13;&#10;•	21 != 31&#13;&#10;•	5 != 31&#13;&#10;•	15 != 31&#13;&#10;•	22 != 31&#13;&#10;•	31 == 31 idx=5 STOP (if its not unique keeps going&#13;&#10;"></p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Performance varies based on values of the index in the array and
the size of the array</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>If we have a very large set it takes a long time to check every
element</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>To verify element is not in array each element must be checked</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>-1 is not a valid index in the array so we use it to determine if
the target value was not found in the array</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the target is found the loop ends and the index is returned</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the end of the loop is reached, then the value is not found</p>

<p class=MsoNormal>Binary Search</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Used to reduce the time (average and worst case) to complete a
binary search</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Data in the array must be sorted</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For each iteration we cut our data in half</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>If we sort the data frequently it is worth sorting</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Binary sort should only be used when the data set is large and
searched frequently</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>First- this integer will represent the lowest index value and
which the target value may potentially be found in the array</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>When mid is greater than the target value last is set to mid-1</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Last- this integer will represent the highest index value at
which the target value may potentially be found in the array</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>When mid is less than the target value first is set to mid+1</p>

<p class=MsoListParagraphCxSpMiddle ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Mid- the average of the first and last ((first + last)/2) will
determine where in the array the next comparison will be made with the target
value.  </p>

<p class=MsoListParagraphCxSpLast style='margin-left:1.0in;'><span
style='font-family:"Courier New"'>o<span >&nbsp;&nbsp;
</span></span>Updated at the start of every start of every iteration in the
binary search process</p>

<p class=MsoNormal><img width=374 height=393 src="CS_159_files/image038.png"
alt="1	3	4	6	8	10	13	15	16	20&#13;&#10;0	1	2	3	4	5	6	7	8	9&#13;&#10;For value 13&#13;&#10;&#13;&#10;1	3	4	6	8	10	13	15	16	20&#13;&#10;0	1	2	3	4	5	6	7	8	9&#13;&#10;first				mid					last&#13;&#10;&#13;&#10;1	3	4	6	8	10	13	15	16	20&#13;&#10;0	1	2	3	4	5	6	7	8	9&#13;&#10;					First&#13;&#10;Mid	last			&#13;&#10;&#13;&#10;1	3	4	6	8	10	13	15	16	20&#13;&#10;0	1	2	3	4	5	6	7	8	9&#13;&#10;						First&#13;&#10;Last&#13;&#10;mid			&#13;&#10;&#13;&#10;"></p>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Stops when first is greater than last (when value is not found or
when mid=target value)</p>

<h2>Multidimensional Array</h2>

<p class=MsoNormal>Single dimension arrays- one row of indexed column values</p>

<p class=MsoNormal>Multidimensional arrays- array with more than one dimension
(2 or 3 or 4 extra)</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The identifier will continue to represent the location where the
memory allocation begins</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Declaration and definition tell the compiler the name, data type,
size (extend) of each dimension</p>

<p class=MsoNormal>Each dimension is zero based</p>

<p class=MsoNormal>Intersection of every row and column represent the capacity
to store a value of the defined type</p>

<p class=MsoNormal>Total capacity is the product of the extend of each
dimension</p>

<p class=MsoNormal>When passing a multidimensional array to a function the
first dimension extend does not need to be declared but the rest of them do (ie
data[][COLS])</p>

<h1>Chapter 9- Pointers and Pointer Applications</h1>

<p class=MsoNormal>Pointer- variable that sores a memory address of another
variable (though the memory addresses the data can be accessed and manipulated)</p>

<p class=MsoNormal>The address operation (&amp;) returns the address of the
memory allocated to a variable</p>

<p class=MsoNormal>“%p” placeholder is commonly used to print the address of a
variable</p>

<h2>Pointer Variables</h2>

<p class=MsoNormal>As with all variables we must declare a pointer before we
can assign a memory address to it</p>

<p class=MsoNormal>To initialize the pointer variable, we just put *identifier </p>

<p class=MsoNormal>If pointer is not initialized, then the pointer may be an
invalid memory address and could result in a segmentation fault</p>

<p class=MsoNormal>Indirection operator (*) places before pointer variable to
access the value stored at the location to which the pointer references</p>

<h2>Array and Pointers</h2>

<p class=MsoNormal>The name of an array much like a point represents a memory
location with the index representing the offset from the address</p>

<p class=MsoNormal><img width=374 height=36 src="CS_159_files/image039.png"
alt="a[i]=*(a+i)"></p>

<p class=MsoNormal>Increase a pointer by one ill advance it to the next element
in the array no matter what type of data is in the array (different data types
require different amounts of memory) </p>

<h2>Memory Allocation</h2>

<p class=MsoNormal>Malloc- allocates a specific number of bytes of memory.  A
pointer variable must be used to reference the starting address of the newly
allocated memory returned from the malloc function</p>

<p class=MsoNormal>Sizeof() operator will accept a data type and return the
number of bytes need to store one value of this type</p>

<p class=MsoNormal>Data=(int*)malloc(sizeof(int)*20)</p>

<h1>Chapter 10 &amp; 11- Strings</h1>

<p class=MsoNormal>String- series of characters with the capability to be
treated as a single unit</p>

<p class=MsoNormal>This delimiter character “\0” represents the end of the data
within a character array</p>

<p class=MsoNormal>Declaration of string char str[11] = “Good Day”</p>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The remaining characters are filled with zeros</p>

<h2>String Input/Output Functions</h2>

<p class=MsoNormal>%s placeholder- represents a string and is used in both
input and output functions</p>

<p class=MsoNormal>Size of string should be one more than the length of (1
delimeter)</p>

<p class=MsoNormal>The scanf function only reads data up until a new line
(‘\n’) or any white space</p>

<p class=MsoNormal>Gets()- alternative to scanf</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Gets function will accept the input terminated by a new array and
make delimiter-terminated string out of it</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Error with it- Can go beyond the size of the array</p>

<p class=MsoNormal>Getchar()- accepts input of a single character</p>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Put it in a while loop to terminate when defined size is reached
or new line is entered</p>

<p class=MsoNormal><img width=374 height=139 src="CS_159_files/image040.png"
alt="Int x[SIZE]&#13;&#10;&#13;&#10;Do{&#13;&#10;	x[index++]=getchar();&#13;&#10;}while(index&lt;SIZE &amp;&amp; x[index-1]!=’\n’);&#13;&#10;x[index-1]=0;&#13;&#10;"></p>

<h1>String.h functions</h1>

<p class=MsoNormal>Strlen(string)- returns the number of characters in the
string.  Does not count the terminal delimiter character                                                                                      </p>

<p class=MsoListParagraph ><span style='font-family:
Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Malloc(sizeof(char)*(strlen(str)+1))</p>

<p class=MsoNormal>Strcpy(str1,str2)- takes the second argument and copy its value
to the first (the contents of str2 are copied to str1)</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Copies characters until the delimiter is found (if there is not
delimiter then the strcpy will continue past the </p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Strncpy/strlcpy are safer because they stop after n characters
which is another parameter passed to the function</p>

<p class=MsoNormal>Strcmp- accepts two strings and returns an integer
indicating how the two strings are different</p>

<p class=MsoListParagraphCxSpFirst ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If strings are equal the function return 0</p>

<p class=MsoListParagraphCxSpLast ><span
style='font-family:Symbol'>·<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If it is different than the number outputted is the difference in
the first characters that are not equal (strcmp(“company”, “coporate”)=-5)</p>

</div>

</body>

</html>
